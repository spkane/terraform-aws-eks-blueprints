# The purpose of this file is to demonstrate how to use GitLab CICD template to automate build and deployent of Terraform IaC
#
# This is a opinionated template which also demonstrates the best practice to implement gitops with Terraform IaC
image: registry.gitlab.com/gitlab-org/terraform-images/stable:latest
variables:
  TF_ROOT: ${CI_PROJECT_DIR}
  TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
  TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}-tfstate
  TF_HTTP_LOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}-tfstate/lock
  TF_HTTP_UNLOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${CI_PROJECT_NAME}-tfstate/lock
  TF_HTTP_LOCK_METHOD : POST
  TF_HTTP_UNLOCK_METHOD: DELETE
  TF_HTTP_RETRY_WAIT_MIN: 1


cache:
  key: "${TF_ROOT}"
  paths:
    - ${TF_ROOT}/.terraform/

before_script:
  - cd ${TF_ROOT}

stages:
  - tf-init
  - tf-fmt
  - tf-validate
  - tf-plan
  - tf-apply
  - tf-destroy

tf-init:
  stage: tf-init
  rules:
    - exists:
        - .destroy-cluster
      when: never
    - changes:
        - "*.tf"
  script:
    - export DEBUG_OUTPUT=true # Optional use for debug purpose only
    - gitlab-terraform init

tf-fmt:
  stage: tf-fmt
  rules:
    - exists:
        - .destroy-cluster
      when: never
    - changes:
        - "*.tf"
  script:
    - gitlab-terraform fmt -recursive

tf-validate:
  stage: tf-validate
  rules:
    - exists:
        - .destroy-cluster
      when: never
    - changes:
        - "*.tf"
  script:
    - gitlab-terraform validate

# ${TF_ROOT}/plan.json pushes the plan into the Terraform backend of GitLab (CI)
tf-plan:
  stage: tf-plan
  artifacts:
    name: plan
    paths:
      - ${TF_ROOT}/plan.cache
    reports:
      terraform: ${TF_ROOT}/plan.json
  rules:
    - exists:
        - .destroy-cluster
      when: never
    - changes:
        - "*.tf"
  script:
    - gitlab-terraform plan -var-file="dev.tfvars"
    - gitlab-terraform plan-json

tf-apply:
  stage: tf-apply
  dependencies:
    - tf-plan
  rules:
    - exists:
        - .destroy-cluster
      when: never
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      changes:
        - "*.tf"
      when: manual
      allow_failure: true
  script:
    - gitlab-terraform apply

tf-destroy:
  stage: tf-destroy
  dependencies:
    - "tf-apply"
  when: manual
  allow_failure: true
  script:
    - gitlab-terraform destroy -var-file="dev.tfvars" -auto-approve
